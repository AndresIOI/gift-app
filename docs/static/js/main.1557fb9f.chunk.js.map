{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","img","title","className","src","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","GifExpertAppp","ReactDOM","render","GifExpertApp","document","getElementById"],"mappings":"2MA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAGrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAqBO,OAC7CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBmB,SAAAP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCEZG,EATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC1B,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKC,IAAKH,IACV,4BAAIC,Q,uBCNGG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAK,SAAAd,GACrB,MAAO,CACLe,GAAIf,EAAIe,GACRd,MAAOD,EAAIC,MACXD,IAAKA,EAAIgB,OAAOC,iBAAiBV,QARhB,kBAWdM,GAXc,4CAAH,sDCiCLK,EA5BC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAEjB,ECH0B,SAACA,GAC3B,MAA0BnB,mBAAS,CACjC2B,KAAM,GACNM,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACTlB,EAAQC,GACPkB,MAAM,SAAAV,GACLQ,EAAS,CACPR,KAAMA,EACNM,SAAS,SAGb,CAACd,IAEIe,EDbiBI,CAAanB,GAA9BQ,EAAP,EAAOA,KAAMM,EAAb,EAAaA,QAGb,OACE,qCACE,6BAAMd,IAEJc,EAAU,cAEN,qBAAKjB,UAAU,6CAAf,SAEIW,EAAKC,KAAK,SAACW,GAAD,OACR,cAAC,EAAD,eAEMA,GADCA,EAAIV,aEQdW,EAvBO,WAEpB,MAAoCxC,mBAAS,CAAC,sBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEIS,EAAWoB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,YCZnBsB,IAASC,OACL,cAACC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1557fb9f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputValue = e => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2) {\n      setCategories(categories => [inputValue , ...categories]);\n      setInputValue('');\n    }\n  }\n\n  return(\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\" \n        value={inputValue}\n        onChange={handleInputValue}\n      />\n    </form>\n  )\n}\n\nexport default AddCategory;\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nconst GifGridItem = ( {img, title} ) => {\n  return (\n    <div className='gif'>\n      <img src={img} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem\n","export const getGifs = async ( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=AThmupJMEulg8qAqmfSKkvmHk7sp45Ch`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      img: img.images.downsized_medium.url\n    }\n  })\n  return gifs;\n}","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nconst GifGrid = ({ category }) => {\n\n  const {gifs, loading} = useFetchGifs(category);\n\n\n  return (\n    <>\n      <h3>{ category }</h3>\n      {\n        loading ? 'Cargando...' : \n          (\n            <div className=\"gif-grid animate__animated animate__fadeIn\">\n              {\n                gifs.map( (gif) => (\n                  <GifGridItem \n                    key={gif.id}\n                    {...gif} \n                  />\n                ))    \n              }\n            </div>\n          )\n      }\n      \n    </>\n  )\n}\n\nexport default GifGrid;","import { useState, useEffect  } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    gifs: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    getGifs(category)\n    .then( gifs => {\n      setState({\n        gifs: gifs,\n        loading: false\n      })\n    });\n  },[category]);\n\n  return state;\n}","import React, { useState } from 'react'\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertAppp = () => {\n\n  const [categories, setCategories] = useState(['League of Legends']);\n\n  return(\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr/>\n      <ol>\n        {\n          categories.map(category => ( \n            <GifGrid \n              key={category} \n              category={category} \n            /> \n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertAppp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}